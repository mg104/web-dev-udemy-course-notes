HTML:

1.) Tags: <h1> ; Elements: <h1>*text*</h1>
2.) Headings: <h1> to <h6>
3.) Paragraphs: <p></p> ; Used to separate lines from each other
4.) Horizontal rule: <hr /> ; Used to insert a horizontal line
5.) Break: <br /> ; Used to separate lines WITHIN A PARAGRAPH (not making new paragraph)
6.) Ordered lists: Used to make numbered lists ;
        
    Code:
    <ol>My Items:
        <li>Item 1</li> <---li tag means "list item"
        <li>Item 2</li>
    </ol>
    
    Output:
    My Items:
        1. Item 1
        2. Item 2
7.) Unordered lists: Used to make lists with bullet points;

    Code:
    <ul>My Items:
        <li>Item 1</li> <---li tag means "list item"
        <li>Item 2</li>
    </ul>
    
    Output:
    My Items:
        . Item 1
        . Item 2

8.) Attributes: Some elements can have attributes with values. These elements are known as Anchor elements. Note that attribute values are always enclosed within quotes, to distinguish them from the other HTML code (like tags, etc)

    Code: <a href="https://www.google.com">Google<a>
    Output: Google
        When you click on Google above, it takes you to Google.com in the browser.

9.) Image elements: <img src="image location" alt="image description"/> ; This is like a void element (no text) and hence doesn't have a closing tag. It is used to display an image. src is used to specify image location (on the internet or local) and alt is used to describe images for the visually impaired who might use screen-reader.

10.) Image elements can go inside Anchor (<a>) tags:

    Code: <a href="..."> 
                <img src="" />
          </a>
    Output: An image that contains embedded link. When we hover mouse over the image it turns into a "hand" and we can click on it to go to the embedded link in <a> tag.

11.) While embedding pages or images into a website, you can use absolute paths (absolute paths like in linux) or relative paths (relative to the location of the html page in which you're referring to the embedded page or image) using ./ or ../ syntax.

12.) CSS (Cascading Style Sheets) is a programming language used to add styling to HTML. There are 3 ways of adding CSS styling to an HTML file:

    a.) Inline: Mention the styling inside the tag of the element that you want to style:
        Code : <html style="style-attribute:style-value">...</html>
        This will only style the particular element, and is generally not used.

    b.) Internal: Mention the styling anywhere in the HTML document that you want to add style to:
        Code:   <html>
                    <style>
                        html{
                            style-attribute:style-value
                        }
                    </style>
                </html>
        This applies the styling only to a particular html page only and the styling cannot be applied to multiple pages at once from only this code.
        Put the code for css in <head> for this.

    c.) External: Mention the styling as a XYZ.css (like: styles.css or main.css, or anything else) in the project files, and add the mention to this file in the html files.
        Code:   
                index.html:

                <html>
                    <link 
                        rel="stylesheet" 
                        href="./styles.css"
                    />
                </html>

                styles.css:

                html{
                    style-attribute:style-value
                }
        This is the most commonly used way of adding css styling to html pages.
        Put the code for css in <head> for this.

13.) CSS Selectors: In .css files, select the HTML elements to style in the following manner:
    
    a.) For selecting all elements with tag abc: abc{}
    b.) For selecting all elements having class=class-value: .class-value{} 
    c.) For selecting all elements having id=id-value: #id-value{}
    d.) For selecting all elements having tag abc with attribute1: abc[attribute1]{}
    e.) For selecting all elements with tag abc having attribute1="attribute1-value": abc[attribute1="attribute1-value"]{}
    f.) For selecting all elements in a page: *{}
    g.) For selecting a child element xyz of an element abc: abc > xyz
    h.) For selecting a descendant element xyz of an element abc: abc xyz

14.) CSS Colors: Name colors in CSS using alphabetical names of colors, or their hexadecimal codes, like "darkgreen" or "#FAF8F1"

15.) To get different free fonts:
    a.) Go to https://fonts.google.com/
    b.) Select the fonts that you want 
    c.) Search and select the fonts you want
    d.) Go to "View Selected Families" on the top-right of the page
    e.) Copy the code in <link> section and paste it in the <head> portion of your html page's code
    f.) Copy the code in "CSS rules to specify families" and use it in the styles.css file of your project.

16.) Chrome Inspecting tool: This is mainly used to inspect other websites' webpages that we might like. To use Chrome inspecting tool, do the following:
    a.) Right-click on an element in a webpage OR press Ctrl+Shift+I
    b.) Press Ctrl+Shift+C for automatically select the html code and css code for any element in the webpage
    c.) Select "Styles" tab to view the CSS styling of the selected element. Note that there are always some "default" values supplied by the browser to an element, which can be over-ridden using our own specified CSS styling. Our changes will be applied rather than default values then.
    d.) Select "Computed" to see the final "computed" values of different fonts and other styling finally applied to the element. "Computed" means, for example, the final values that were computed (say 2 * 100px = 200px) from the raw values (say 2rem).

17.) Box Model: In an HTML document, every element is actually inside an invisible box. This box has the following 4 measurements:
    
    a.) Box: This is the box containing the element. It's dimensions can be set by setting "height" and "width" of the element
    b.) Border: This is the border around the box. It's thickness on 4 sides can be set by setting it like so- border: size style color (for example: border: 10px solid black, OR border: 20px dashed grey, etc).
        We can also set the width of each of the 4 sides of the border by setting: 
        a.) border-width: px (for example: border-width: 10px) - This sets the border width of top, right, bottom and left to 10px each
        b.) border-width: top&bottompx left&rightpx(for example: border-width: 10px 20px) - This sets the border width of top and bottom to 10px, and left and right to 20px.
        c.) border-width: toppx rightpx bottompx leftpx (for example: border-width: 10px 20px 30px 40px) - This sets the size of top to 10px, right to 20px, bottom to 30px and left to 40px.
    c.) Padding: This is the box that can be put between the inside box and the border. It is set in a manner similar to setting the dimensions of the Border.
    d.) Margin: This is the box that can be outside the border. It is set in a manner similar to setting the dimensions of the Border.

    Note that since these boxes are usually invisible in a webpage as they're mainly used to align different elements on a webpage, they might cause a CSS file to behave abnormally and it might be difficult to troubleshoot problems due to the invisible padding from them in a webpage. To make troubleshooting issues due to them easier, use a tool called "Pesticide" in Google Chrome.

18.) Cascade/How to resolve conflicting CSS styling rules: There can be a scenario where we may have applied different styling rules to the same html element. If this is the case, then the rules listed out in the picture/diagram "./CSS-cascade-importance-rules" will be applied, in a "cascading" manner, i.e., the rules towards left and lower side will be more important than rules in right and upper side of the picture/diagram

19.) position (Positioning): An HTML element can be positioned according to the following 4 methods, by mentioning its "position" attribute in CSS:
    a.) position: "static" - This is the default wherein an element is positioned at bottom-left of its previous element
    b.) position: "relative" ; top: 50px; left: 50px; - In this, an element is positioned relative to its static position, for example in this case: 50px down from top and 50px right from left.
    c.) position: "absolute" ; top: 50px; left: 50px; - In this, an element is positioned relative to it nearest ancestor which has its position set to anything else than static. If there's no such ancestor then the element is positioned with respect to the top left of the browser.
    d.) position:  "fixed" - In this the element is positioned at a fixed location wrt the top left of the browser, and doesn't move even when we scroll up or down or right or left on the page.

20.) display (Dispalying of elements): This attribute controls the display position of 2 elements wrt to each other. There are 3 options for this:
    a.) display: "block" - This is every element's display default value (except in case of span element the default value of display is inline). In this case, the element's box occupies the entire width on the page. As such, the second element just after it is moved to the next "row" to it. It's height and width can be adjusted through the height and width attributes.
    b.) display: "inline" - This option makes the element occupy only as much width as is needed to display that element. As such, the element after it will be displayed next to it in the same line. In this option, the element doesn't respond to setting it's height or width.
    c.) display: "inline-block" - In this option, the element is inline but it's height and width can be adjusted like a block element.

21.) float (displaying an element to "mould" around it's previous sibling element): If there is an img element containing an image and a p element containing some text after the img element,
        then in case we write: <img>float: left</img>, then the text will start occupying the leftover space to the right of the image (like in a newspaper article where text appears side-by-side
        of the article's images). In case there are 2 div elements adjacent to each other in html code, then by setting first div element to float: "left" we can move it to left of page and
        by setting second element's float: "right" we can position it to the right of the first div element.
    If you want a footer (for example) to ignore the previous element having float: "left" or "right", then set the footer's clear: "left" or "right" or "both" to make the footer ignore this setting of its previous sibling's float attributes.

22.) Media queries: To make a device more responsive, use the @media query in the following manner:
        @media (max-width: "max-width-value") {
            elementabc {
                ......
            }
        }- This styles the page in a manner that when the width falls below max-width-value then the elementabc is given the styling that is enclosed inside the curly brackets under the 
        @media.

23.) flex direction: 
        
        IMPORTANT NOTE: For flexbox, also see the flexbox cheatsheet ./css-flexbox-poster.png.
        
        Flexbox is a dynamic way to align items on a page. It can be set by mentioning display: flex in the styling of the container item containing the elements that need to be
        inside the flexbox. It can be customized by assigning the following 2 possible values to the flex-direction attribute:
        
        a.) flex-direction: row - This aligns the items in the container in a single row horizontally. The items "squeeze" together when the screen size is reduced (the squeeze behaviour
            is determined in more detail in the flex sizing section below). When not squeezed together due to screen size, the items take only width that is required (like in the case
            when display is set to inline)
        b.) flex-direction: row-reverse - This is like row option, but just that the order of items from left to right is reversed.
        c.) flex-direction: column - This aligns the items in the container in a single column vertically.
        d.) flex-direction: column-reverse: Just like row-reverse
        e.) Another option is to also mention gap: XXXpx in the container's CSS code body, to specify spaces between each of the flexbox's items.

        The natural direction of flex-direction (horizontal in case of flex-direction: row; and vertical in case of flex-direction: column) is known as main axis and the 
        direction which is perpendicular to the flex-direction (vertical in case flex-direction: row; and horizontal in case of flex-direction: column) is known as cross axis

        To control the size of flex box along the main axis (therefore: width in case of flex-direction: row and height in case of flex-direction: column) can be set by setting 
        flex-basis: XXXpx in the item's (not the item's container) CSS code body.

24.) flex layout: Flexbox allows different options as below:

        a.) order (in items' CSS; not in container's CSS): If we set order: 1 for item1 order: 10 for item2, order: 3 for item3, say, flexbox arranges these items in the increasing order, 
            i.e., as item1 item3 item2.

        b.) justify-content (in container's CSS; not in items' CSS): This works just like align-items (explained below) with the ONLY DIFFERENCE being that it works along the main-axis
                while the align-content works along the cross-axis.

                When flex-direction: row, then 
                1.) justify-content: flex-start aligns items from left side of the page. 
                2.) justify-content: flex-end aligns items from right to left
                3.) justify-content: center aligns items in middle of horizontal line
                4.) justify-content: space-between aligns items with no space between flex-start and first item, and no space between flex-end and last item.
                5.) justify-content: space-around is just like space-between but with space between flex-start and first item, and space between flex-end and last item.
                6.) There are a few other values as in the cheatsheet.

                When flex-direction: column, then
                1.) justify-content: flex-start aligns items from top of the page
                2.) justify-content: flex-end aligns items from bottom of the page
                3.) justify-content: center aligns items in middle of the container's height. NOTE: For container, set height: 100% and justify-content: center, in order to center the 
                        items vertically in the middle of the page
                4.) Other values as above for flex-direction: row and as in the cheatsheet

        c.) flex-wrap (in container's CSS, not in items' CSS): Following values can be assigned to this attribute:
                1.) flex-wrap: wrap - This makes the items wrap around into another row in case of flex-direction: row and another column in case of flex-direction: column, when
                        the screen size is reduced horizontally or vertically, respectively.
                2.) flex-wrap: nowrap - This stops the items from wrapping around and they simply disappear when the screen size is reduced horizontally or vertically.
        
        d.) align-items: This only works when flex-wrap: nowrap. It doesn't work when flex-wrap: wrap. It works just like justify content (explained above) and has all the same options as 
                justify-content, with the ONLY DIFFERENCE being that it works along the cross-axis while justify content works along the main axis.
            NOTE: To make a SINGLE item have a different alignment across cross-axis, as compared to other items in the same container as this item, just go into the CSS code body of THIS
                    PARTICULAR ITEM and set align-self: .... to align it differently than the rest of the items.

        e.) align-content: This works just like align-items, but it works ONLY when flex-wrap: nowrap.

25.) flex-sizing: 

        IMPORTANT NOTE: This is quite a complex subject and to learn about it completely, view the complete video: https://www.udemy.com/course/the-complete-web-development-bootcamp/learn/lecture/37368390#overview

        Flex sizing determines:
            a.) What would be the size of each item in the flexbox be
            b.) How would the size of each item behave in case the screen size of the browser is increased or decreased.
        
        The size and it's behaviour of each of the items is controlled by each of the following values:
            a.) Content width: This is the width of the item's content. It is equal to:
                1.) When the screen is maximized: Width of the item's content on same line
                2.) When the screen is reduced: Width of the item's longest word
            b.) width: This attribute of an item can be set in its CSS code body. 
            c.) flex-basis: This is another attribute whose value can be set in the CSS code body.
            d.) min-width and max-width: We can set min-width and max-width of an item in its CSS code body.
        
        The following rules determine the size behaviour of items in a flex box:
            The width of flexbox items is determined in the following sequence (from right to left in order of decreasing priority):
            content width < width < flex-basis < Min/Max-width

            In no case does the items width reduce such that it's longest word is broken up. In case the width is so less, the item disappears out of the browser window but doesn't 
            reduce it's width at all.
            a.) Default size behaviour:
                1.) When screen size is normal: Items take "inline" width, i.e., only the width that they need to display the content.
                2.) When screen size is reduced: Items adjust space by reducing their width and increasing their height to display all the content. However, they never go below their
                    minimum Content width (which is the longest word in the item)
            b.) Size behaviour when width or flex-basis is set:
                    1.) When screen size is normal: If content-width allows, the size is set to width or flex-basis. If both width and flex-basis is set then the width is ignored (as per the priority order
                    mentioned above) and flex-basis is taken to be the width.
                    2.) When screen size is reduced: If the screen size is reduced, the item's width is reduced but only till it's longest word can fit the item's box. Otherwise the item
                        just starts disappearing out of the browser window
            c.) min-width and max-width: min-width and max width are the MOST IMPORTANT attribute which can be set and which (if they're set) set HARD LIMIT on the minimum (upon reducing
                    screen size) and maximum (when the screen is normal size) width of the item. Everything else (when width or flex-basis have been set or not set) keeps working as it is
                    but the min-width and max-width come into picture only when the item width approaches the hard boundary set by them.
        
        There are 2 more attributes that can be set:

            1.) flex-grow: When it's set to 0 the items CANNOT "grow" beyond their set width and when it's set to 1 the items CAN grow beyond their set width
            2.) flex-shrink: Similar as flex-grow but in terms of items shrinking.
            3.) When both flex-grow and flex-shrink are set to 1 then the items can grow and shrink on increasing or decresing screen size.
            4.) flex-grow and flex-shrink can be set simultaniously by setting flex: 1 1 0 (which means that flex-grow: 1; flex-shrink: 1; and 0 means equal width of all items)
            5.) In case there are 2 items and one item's flex: 1 1 0 and other items flex: 2 2 0, then this means that item2 will always be 2 times of the item1's width no matter what the 
                screen size is.